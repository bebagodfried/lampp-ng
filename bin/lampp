#!/bin/bash
# LAMP Stack - NG :: Linux Apache2 MariaDB PHP
# -----------------------------------------------
# license: MIT
# Author: B√©ba Godfried A. <dev@bebagodfried.com>
# -----------------------------------------------
# Managing the LAMPP service
# * $1: option 
# * $2: argument
# 
# Bash
red='\033[0;31m'
green='\033[0;32m'
warning='\033[0;33m'
reset='\033[0m' # No Color

#
SERVER_ROOT='/var/www' #> used for lampp environement
SERVER_CONF_D='/var/www/conf.d' #> used for lampp config
DOCUMENT_ROOT='/var/www/html' #> used for lampp hosting directory
# 
# lampp make:index
new_project=$2
welcome="Your <u>$new_project</u> project was created successfully"

if [[ ! $2 ]]; then
    new_project="LAMPP &bull; NG Edition"
    welcome="You installed <u>$new_project</u> successfully!"
else
    welcome="Your <u>$new_project</u> project was created successfully"
fi

# shellcheck disable=SC2089
index="<!DOCTYPE html>
<html lang='en'>
<head>

    <meta charset='UTF-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <title>$new_project - Test Page</title>

    <style>
        \* {
            display: block;
            box-sizing: border-box;

            margin: 0;
            padding: 0;
        }
        .main {            
            background-color: #bbaa99;
            background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='1024' height='512' viewBox='0 0 160 80'%3E%3Cg fill='%23B0A090' %3E%3Cpolygon points='0 10 0 0 10 0'/%3E%3Cpolygon points='0 40 0 30 10 30'/%3E%3Cpolygon points='0 30 0 20 10 20'/%3E%3Cpolygon points='0 70 0 60 10 60'/%3E%3Cpolygon points='0 80 0 70 10 70'/%3E%3Cpolygon points='50 80 50 70 60 70'/%3E%3Cpolygon points='10 20 10 10 20 10'/%3E%3Cpolygon points='10 40 10 30 20 30'/%3E%3Cpolygon points='20 10 20 0 30 0'/%3E%3Cpolygon points='10 10 10 0 20 0'/%3E%3Cpolygon points='30 20 30 10 40 10'/%3E%3Cpolygon points='20 20 20 40 40 20'/%3E%3Cpolygon points='40 10 40 0 50 0'/%3E%3Cpolygon points='40 20 40 10 50 10'/%3E%3Cpolygon points='40 40 40 30 50 30'/%3E%3Cpolygon points='30 40 30 30 40 30'/%3E%3Cpolygon points='40 60 40 50 50 50'/%3E%3Cpolygon points='50 30 50 20 60 20'/%3E%3Cpolygon points='40 60 40 80 60 60'/%3E%3Cpolygon points='50 40 50 60 70 40'/%3E%3Cpolygon points='60 0 60 20 80 0'/%3E%3Cpolygon points='70 30 70 20 80 20'/%3E%3Cpolygon points='70 40 70 30 80 30'/%3E%3Cpolygon points='60 60 60 80 80 60'/%3E%3Cpolygon points='80 10 80 0 90 0'/%3E%3Cpolygon points='70 40 70 60 90 40'/%3E%3Cpolygon points='80 60 80 50 90 50'/%3E%3Cpolygon points='60 30 60 20 70 20'/%3E%3Cpolygon points='80 70 80 80 90 80 100 70'/%3E%3Cpolygon points='80 10 80 40 110 10'/%3E%3Cpolygon points='110 40 110 30 120 30'/%3E%3Cpolygon points='90 40 90 70 120 40'/%3E%3Cpolygon points='10 50 10 80 40 50'/%3E%3Cpolygon points='110 60 110 50 120 50'/%3E%3Cpolygon points='100 60 100 80 120 60'/%3E%3Cpolygon points='110 0 110 20 130 0'/%3E%3Cpolygon points='120 30 120 20 130 20'/%3E%3Cpolygon points='130 10 130 0 140 0'/%3E%3Cpolygon points='130 30 130 20 140 20'/%3E%3Cpolygon points='120 40 120 30 130 30'/%3E%3Cpolygon points='130 50 130 40 140 40'/%3E%3Cpolygon points='120 50 120 70 140 50'/%3E%3Cpolygon points='110 70 110 80 130 80 140 70'/%3E%3Cpolygon points='140 10 140 0 150 0'/%3E%3Cpolygon points='140 20 140 10 150 10'/%3E%3Cpolygon points='140 40 140 30 150 30'/%3E%3Cpolygon points='140 50 140 40 150 40'/%3E%3Cpolygon points='140 70 140 60 150 60'/%3E%3Cpolygon points='150 20 150 40 160 30 160 20'/%3E%3Cpolygon points='150 60 150 50 160 50'/%3E%3Cpolygon points='140 70 140 80 150 80 160 70'/%3E%3C/g%3E%3C/svg%3E\");

            display: flex;
                align-items: center;
                justify-content: center;

            font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;

            overflow: hidden;

            height: 100vh;
            width : 100vw;
        }
    </style>
</head>
<body class='main'>
    <div>
        <h2>üëè&nbsp;Congratulations!</h2>
        <h1>$welcome</h1>
    </div>
</body>
</html>
<!-- Genarated by lampp v1.1.0 -->
"
# 
# env
httpd='httpd'

w3_server='httpd'
db_server='mariadb-server'

w3_htdocs='/var/www/html/'

# packages manager
if ( command -v apt-get >> /dev/null );then
    pkg='apt'

elif ( command -v yum >> /dev/null );then
    pkg='yum'
    db_server='mariadb'

elif ( command -v pamac >> /dev/null );then
    pkg='pamac'
    w3_server='apache'
    db_server='mariadb'
    w3_htdocs='/srv/http'

elif ( command -v zypper >> /dev/null );then
    pkg='zypper'

else
    echo 'Exit(1)::Unsupported package'
    exit 1
fi

# function
function cls() {
    clear
}

function wait() {
    echo
    read -rp 'Press (enter) to continue '
}

function head() {
    clear
    echo -e "${green}LAMP Stack - NG :: Linux Apache2 MariaDB PHP${reset}"
    echo -e "$(uname -a)"
    echo ''
}

#
error() {
    local err_log=$1
    echo "lampp: $err_log"
    echo "Try 'lampp --help' for more information."
    echo
}

#
if [[ $1 ]];then
    if [[ $2 ]]; then
        # 
        if [[ $1 = '--start' || $1 = '-s' ]];then
            clear
            sudo systemctl start "$2"
            
            if [[ "$?" == 0 ]]; then
                head
                echo "$2 is running"
            else
                head
                echo "${red}Can't start $2${reset}"
            fi

            exit 0
        fi

        # 
        if [[ $1 = '--restart' || $1 = '-r' ]]; then
            head
            echo "Restarting $2 ..."

            sudo systemctl restart "$2"
                        
            if [[ $? == 0 ]]; then
                echo "$2 is now running"
            else
                echo "${red}Can't restart $2${reset}"
            fi

            exit 0
        fi
        
        # 
        if [[ $1 = '--stop' || $1 = '-S' ]];
          then
            sudo systemctl stop "$2"

            if [[ $? == 0 ]]; then
                head
                echo "$2 is stopped"
            else
                head
                echo "${red}Can't stop $2${reset}"
            fi

            exit 0
        fi

        #
        if [[ $1 = '--new-project' || $1 = '-n' ]];then
            # Configuration
            # - Project
            sudo mkdir "$DOCUMENT_ROOT/$new_project" || echo "$new_project already exists!"

            # Premissions
            sudo chmod 777 "$DOCUMENT_ROOT/$new_project"
            sudo echo $index > "$DOCUMENT_ROOT/$new_project/index.php"
            
            # report
            echo ''
            echo "::$new_project:: created successfully at ~/www/$new_project"
            echo "https://localhost/$new_project"
            xdg-open https://localhost/$new_project

            exit 0
        fi

        # 
        if [[ $1 = '--migrate-project' || $1 = '-m' ]];then
            # Configuration
            # - Project migration
            sudo cp -Rf "$new_project" "$DOCUMENT_ROOT/"

            # report
            echo ''
            echo "${green}Completed!${reset}"
            echo ''

            exit 0
        fi
      else
        #
        if [[ $1 = '--new-index' ]];then
            # Index
            sudo echo $index > "$DOCUMENT_ROOT/index.php"

            # report
            xdg-open https://localhost/

            exit 0
        fi

        # 
        if [[ $1 = '--init' || $1 = '-i' ]];then
            # Configuration
            # - Users & Premissions
            # - Give $USER privilegies over the document_root
            sudo chown apache:$USER $DOCUMENT_ROOT
            sudo chmod 775 $DOCUMENT_ROOT

            sudo chown $USER: $SERVER_ROOT'/etc/phpmyadmin'
            sudo chmod 775 $SERVER_ROOT'/etc/phpmyadmin'
            
            sudo chown $USER: $SERVER_CONF_D'/vhost.conf'
            sudo chmod 775 $SERVER_CONF_D'/vhost.conf'
            exit 0
        fi

        # 
        if [[ $1 = '--update' || $1 = '-u' ]];then
            # Check and updates lampp packages
            sudo $pkg update $w3_server $db_server
            exit 0
        fi

        # 
        if [[ $1 = '--start' || $1 = '-s' ]];then
            clear
            sudo systemctl start $w3_server.service $db_server.service

            if [[ $? == 0 ]];then
                head
                echo "$w3_server is running"
                echo "$db_server is running"
            else
                head
                echo "${red}Can't start $w3_server${reset}"
                echo "${red}Can't start $db_server${reset}"
            fi

            exit 0
        fi

        # 
        if [[ $1 = '--restart' || $1 = '-r' ]];then
            clear
            head
            echo "Restarting ..."
            
            sudo systemctl restart $w3_server.service $db_server.service

            if [[ $? == 0 ]];then
                head
                echo "$w3_server is now running"
                echo "$db_server is now running"
            else
                head
                echo "${red}${red}Can't restart $w3_server${reset}"
                echo "${red}${red}Can't restart $db_server${reset}"
            fi

            exit 0
        fi

        # 
        if [[ $1 = '--stop' || $1 = '-S' ]];then
            clear
            sudo systemctl stop $w3_server.service $db_server.service

            if [[ $? == 0 ]];then
                head
                echo "$w3_server is stopped"
                echo "$db_server is stopped"
            else
                head
                echo "${red}Can't stop $w3_server${reset}"
                echo "${red}Can't stop $db_server${reset}"
            fi

            exit 0
        fi

        # 
        if [[ $1 = '--allow-remote' || $1 = '-a' ]];then
            # reassign Firewall Rules
            sudo firewall-cmd --add-service=http --permanent
            sudo firewall-cmd --add-service=https --permanent

            if ( command -v firewall-cmd >> /dev/null );then
                sudo systemctl start firewalld
                sudo systemctl enable firewalld

                if ( ! firewall-cmd --list-protocols | grep -q "https" ); then
                    sudo firewall-cmd --add-service=http --permanent
                    sudo firewall-cmd --add-service=https --permanent

                else
                    echo -e "${green} ALREADY_ENABLED ${reset}"
                fi

                # - reload firewall to apply changes
                sudo systemctl reload firewalld
            elif ( command -v ufw >> /dev/null );then
                sudo systemctl start ufw
                sudo systemctl enable ufw

                if ( ! ufw app list | grep -q "https" ); then
                    sudo ufw allow http
                    sudo ufw allow https

                else
                    echo -e "${green} ALREADY_ENABLED ${reset}"
                fi
                
                # - reload firewall to apply changes
                sudo systemctl reload ufw
            else
                echo "Something was wrong!"
            fi

            exit 0
        fi

        # 
        if [[ $1 = '--help' || $1 = '-h' ]];
          then
          
            cls && head
            echo "---------------------------------------------------------------------"
            echo -e "Web server     : ${green}$w3_server${reset}"
            echo -e "MySQL server   : ${green}$db_server${reset}"
            echo -e "Documents root : ${green}$w3_htdocs${reset}"
            echo "---------------------------------------------------------------------"

            echo "
Usage: lampp [[OPTION]] [[ARG]]

    -n, --new-project       create a new project path and serve
    -m, --migrate-project   migation of existing project to server

    -i, --init              redefine privilegies over the server
    -u, --update            check and updates lampp packages

    -s, --start             start all services and exit
    -h, --stop              hibernate all services and exit
    -r, --restart           restart all services and exit

        --grant-remote      allow incomming request access

        --help              display this help and exit
        --version           output version information and exit

Examples:
    lampp --start           start apache & mariadb services
    lampp --start mariadb   start mariadb services only
    lampp --start httpd     start apache services only"
              
            echo
            exit 0
        fi

        # 
        if [[ $1 = '--version' || $1 = '-v' ]];
          then
            lampp_ver="1.1.0"
            echo "lampp version $lampp_ver"
            exit 0
        fi

        # 
        error "missing operand"
        
    fi
  else
    clear
    error "missing operand"
fi
