#!/bin/bash
# -----------------------------------------------
# license: MIT
# Author: BÃ©ba Godfried A. <dev@bebagodfried.com>
# -----------------------------------------------
# Bash
red='\033[0;31m'
green='\033[0;32m'
warning='\033[0;33m'
reset='\033[0m' # No Color

# env
httpd='httpd'

w3_server='httpd'
db_server='mariadb-server'

w3_htdocs='/var/www/html/'

lamppctl=$(pwd)/bin/lampp

# packages manager
if ( command -v apt-get >> /dev/null );then
    pkg='apt'
else
    if ( command -v yum >> /dev/null );then
        pkg='yum'
    else
        if ( command -v pamac >> /dev/null );then
            pkg='pamac'
            w3_server='apache'
            db_server='mariadb'
            w3_htdocs='/srv/http'
        else
            if ( command -v zypper >> /dev/null );then
                pkg='zypper'
            else
                echo 'Exit(1)::Unsupported package'
                exit 1
            fi
        fi
    fi
fi

# function
function cls() {
    clear
}

function wait() {
    echo
    read -p 'Press (enter) to continue ' esc
}

function head() {
    echo -e "${green}LAMP Stack - NG :: Linux Apache2 MariaDB PHP${reset}"
    echo -e "$(uname -a)"
    echo ''
}

function get_phpmyadmin() {
    cd $w3_htdocs
    sudo wget 'https://files.phpmyadmin.net/phpMyAdmin/5.2.1/phpMyAdmin-5.2.1-all-languages.zip'
    sudo unzip -o 'phpMyAdmin-5.2.1-all-languages.zip'
    sudo rm 'phpMyAdmin-5.2.1-all-languages.zip'

    sudo mv -f 'phpMyAdmin-5.2.1-all-languages' 'phpmyadmin'
    sudo chown root:root phpmyadmin/
    sudo chmod 755 phpmyadmin/
}

# start
cls && head
echo -e "Web server    : ${green}$w3_server${reset}"
echo -e "MySQL server  : ${green}$db_server${reset}"
echo -e "Documents root: ${green}$w3_htdocs${reset}"
wait
sudo $pkg update

# Step 1: Web Server

cls && head
echo -e "${green}Installing Packages:${reset}"
echo '===================='
echo -e "${warning}# => Apache Web Server...${reset}"
sudo $pkg install $w3_server

# - Start and enable apache server
# - mod_rewrite on Debian-based Systems
if ( command -v a2enmod >> /dev/null );then
    sudo a2enmod rewrite 
fi

# - mod_rewrite on RHEL-based Systems
if ( command -v httpd >> /dev/null );then
	# unlock `httpd.conf`
	sudo chmod 777 /etc/httpd/conf/httpd.conf
	
	# write `httpd.conf`
	sudo cp conf.d/httpd.conf /etc/httpd/conf/httpd.conf
	
	# lock `httpd.conf`
	sudo chmod 644 /etc/httpd/conf/httpd.conf
fi

sudo systemctl start $httpd
sudo systemctl enable $httpd

# Step 2: Database Server

echo ''
echo -e "${warning}# => MariaDB Database Server ...${reset}"

sudo $pkg install $db_server

# - Start and enable mariadb server

sudo systemctl start mariadb
sudo systemctl enable mariadb

# Step 3: PHP

echo ''
echo -e "${warning}# => PHP & modules dependencies...${reset}"
sudo $pkg install php php-common php-mysqlnd php-pdo

if [ $w3_server == 'apache' ]; then
    sudo $pkg install php-$w3_server
fi
echo ''

sudo $pkg install php-json php-xsl php-gd php-fpm php-cgi php-snmp httpd-tools mod_ssl
echo ''

sudo $pkg install php-mysqli
echo ''

sudo $pkg install composer

# Step 4: Get phpMyAdmin GitHub Repository
echo ''
read -p "$(echo -e ${warning})# => Get phpMyAdmin ? [y/N] $(echo -e ${reset})" pma

if [ "$pma" == "y" ];then
    get_phpmyadmin
else
    if [ "$pma" == "yes" ];then
        get_phpmyadmin
    else
        if [ "$pma" == "Y" ];then
            get_phpmyadmin
        else
            echo 'skipped ...'
        fi
    fi
fi

# pause
wait
cls && head

# Step 5: Config Firewall Rules

echo -e "${green}Configuring Firewall:${reset}"
echo '====================='

# - Check if `'firewall-cmd'`/ufw firewalling exist

if ( command -v firewall-cmd >> /dev/null );then
    sudo systemctl start firewalld
    sudo systemctl enable firewalld

    sudo firewall-cmd --add-service=http --permanent
    sudo firewall-cmd --add-service=https --permanent
    
	# - reload firewall to apply changes
	sudo systemctl reload firewalld
else
    if ( command -v ufw >> /dev/null );then
        sudo systemctl start ufw
        sudo systemctl enable ufw

        sudo ufw allow http
        sudo ufw allow https
        
        # - reload firewall to apply changes
        sudo systemctl reload ufw
    else
        sudo $pkg install firewalld

        sudo systemctl start firewalld
        sudo systemctl enable firewalld

        sudo firewall-cmd --add-service=http --permanent
        sudo firewall-cmd --add-service=https --permanent
        
        # - reload firewall to apply changes
        sudo systemctl reload firewalld
    fi
fi

# --- allow httpd to unified
sudo setsebool -P httpd_unified 1

# --- allow httpd to read user content
sudo setsebool -P httpd_read_user_content 1

# --- allow httpd to can network connect
sudo setsebool -P httpd_can_network_connect 1

# --- restart $httpd service to load firewall rules
sudo setsebool -P httpd_graceful_shutdown 1

# --- allow httpd to can network relay
sudo setsebool -P httpd_can_network_relay 1

# --- allow nis to enabled
sudo setsebool -P nis_enabled 1


sudo systemctl restart $httpd
wait
clear

# Step 7: Secure MySQL Installation

echo -e "${green}MySQL Configurations:${reset}"
echo '====================='

sudo mysql_secure_installation
# sudo mysql -h '' -u root -p < my.sql

# pause
echo ""

# then restart $httpd service to load new configuration

sudo systemctl restart $httpd

# Step 8: File && Permissions

# - Document_root is `$w3_htdocs`
# - Enable write permissions on `document_root`
sudo chmod -R 777 $w3_htdocs

# Step 9: SSL - activated by lampp-ng config

### Relax access to /var/www/html from $HOME/ folder
ln -s $w3_htdocs $HOME/www
rm $HOME/www/html

# ---------------------------------------------------
cls
echo ''
echo "All done!  If you've completed all of the above steps, your LAMPP-NG"
echo 'installation should now be functional.'
echo ''
echo -e "${green}Thanks for using LAMPP-NG!${reset}"

sudo cp $lamppctl /usr/bin
echo "<?php phpinfo() ?>" > $HOME/www/info.php

if [ $(id -u) == 0 ]; then
    echo Your server informations here: https://localhost/info.php
else
    xdg-open https://localhost/info.php
fi

lampp --new-index

wait
lampp --help

# !Option: add a personal host
# eof
